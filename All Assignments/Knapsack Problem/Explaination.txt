solve() method: 
This is the heart of the program that uses dynamic programming to solve the 0/1 knapsack problem. 
The idea is to build a table dp such that dp[i][j] stores the maximum value achievable using the first i items and a knapsack of capacity j. This table is filled iteratively using the values and weights of items, and decisions are made based on whether to include or exclude each item to achieve the maximum value.

The main idea is to construct a 2D table, where each cell at position (i, w) represents the maximum value achievable using the first i items while not exceeding a total weight of w. The table is filled iteratively. Initially, when no items are considered or the weight is zero, the value is set to 0. As we progress, for each item, we decide whether to include it in the solution or not based on its weight and value in relation to the current weight limit. If including the item provides a higher value, the table is updated to reflect that. After populating the table, the bottom-right cell contains the maximum value achievable for the entire set of items. Additionally, by tracing back from this cell, we can identify which items were selected to achieve this value.
