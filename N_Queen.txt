import java.util.Scanner;

public class N_Queens {
   

    static boolean solveNQueens(char[][] board, int row) {
        int N = board.length;
        if (row == N) {
            return true; // Found a solution
        }

        for (int col = 0; col < N; col++) {
            if (isSafe(board, row, col, N)) {
                board[row][col] = 'Q';
                if (solveNQueens(board, row + 1)) {
                    return true; // Continue with the next row
                }
                board[row][col] = '.'; 
            }
        }
        return false; // No solution found for this row
    }

    static boolean isSafe(char[][] board, int row, int col, int N) {
        // Check column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        // Check upper-left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Check upper-right diagonal
        for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    static void printBoard(char[][] board) {
        int N = board.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of queens: ");
        int N = scanner.nextInt();
        scanner.close();

        char[][] board = new char[N][N];
        if (solveNQueens(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution found.");
        }
    }
}
